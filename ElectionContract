pragma solidity ^0.4.0;

contract Election{
    struct candidate{
        string name1;
        uint voteCount;
    }
    struct voter{
        bool voted;
        uint voteIndex;
        uint weight;
    }

    address public owner;
    mapping(address=>voter) public voters;
    candidate[] public candidates;
    uint public electionEnd;
    
    function Election(string _name,uint duration,string cand1,string cand2){
        owner=msg.sender;
        name1= _name;
        electionEnd=now+(duration*1 minutes);
        candidates.push(candidate(cand1,0));
        candidates.push(candidate(cand2,0));
    }
    
    event Election_Results(string name,uint voteCount);
    
    function authorize(address voter){
    require(msg.sender==owner);
    require(!voters[voter].voted);
    voters[voter].weight=1;
    }
    
    function vote(uint voteIndex){
        require(now<electionEnd);
        require(!voters[voter].voted);
        
        voters[msg.sender].voted=true;
        voters[msg.sender].voteIndex=voteIndex;
        
        candidates[voteIndex].voteCount+=voters[msg.sender].weight;
    }
    
    
    function end(){
        require(msg.sender==owner);
        require(now>electionEnd);
        
        for(int i=0;i<candidates.length;i++)
        Election_Results(candidates[i].name1,candidates[i].voteCount);
        
    }
    
